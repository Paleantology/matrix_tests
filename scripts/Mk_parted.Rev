print("Processing partitioned Script")

br_len_lambda ~ dnExp(0.2)
moves.append(mvScale(br_len_lambda, weight=2))

# Set up Gamma-distributed rate variation.
alpha_morpho ~ dnUniform( 0.0, 1E6 )
rates_morpho := fnDiscretizeGamma( alpha_morpho, alpha_morpho, 4 )

# Moves on the parameters to the Gamma distribution.
moves.append( mvScale(alpha_morpho, lambda=1, weight=2.0) )


## Tree definition

phylogeny ~ dnUniformTopologyBranchLength(taxa, branchLengthDistribution=dnExponential(br_len_lambda))
moves.append(mvNNI(phylogeny, weight=n_branches/2.0))
moves.append(mvSPR(phylogeny, weight=n_branches/10.0))
moves.append(mvBranchLengthScale(phylogeny, weight=n_branches))
tree_length := phylogeny.treeLength()


morpho_u <- morpho
morpho_u.excludeCharacter(v())

n_max_states <- 2
idx = 1
morpho_bystate <- morpho_u.setNumStatesVector()
for (i in 1:n_max_states) {
    nc = morpho_f_bystate[i].nchar()
    # for non-empty character blocks
    if (nc > 0) {
        # make i-by-i rate matrix
        q[idx] <- fnJC(i)
# create model of evolution for the character block
        m_morph[idx] ~ dnPhyloCTMC( tree=phylogeny,
                                    Q=q[idx],
                                    nSites=nc,
                                    siteRates=rates_morpho,
                                    type="Standard")

        # attach the data
	    m_morph[idx].clamp(morpho_f_bystate[i])

        # increment counter
        idx = idx + 1

}
}


morpho_s <- morpho
morpho_s.excludeCharacter(v())


diag_rates := [ [  0.0, lambda,    0.0,    0.0],
                [   mu,    0.0, lambda,    0.0],
                [  0.0,     mu,    0.0, lambda],
                [  0.0,    0.0,     mu,    0.0] ]

Q_s := fnFreeK(diag_rates)
s_morph ~ dnPhyloCTMC( tree=phylogeny,
                            Q=Q_s,
                            nSites=nc,
                            siteRates=rates_morpho,
                            type="Standard")
s_morph.clamp(morpho_s)
