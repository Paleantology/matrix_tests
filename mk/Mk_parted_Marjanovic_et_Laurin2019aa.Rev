print("Processing partitioned Script")

br_len_lambda ~ dnExp(0.2)
moves.append(mvScale(br_len_lambda, weight=2))

# Set up Gamma-distributed rate variation.
alpha_morpho ~ dnUniform( 0.0, 1E6 )
rates_morpho := fnDiscretizeGamma( alpha_morpho, alpha_morpho, 4 )

# Moves on the parameters to the Gamma distribution.
moves.append( mvScale(alpha_morpho, lambda=1, weight=2.0) )


## Tree definition

phylogeny ~ dnUniformTopologyBranchLength(taxa, branchLengthDistribution=dnExponential(br_len_lambda))
moves.append(mvNNI(phylogeny, weight=n_branches/2.0))
moves.append(mvSPR(phylogeny, weight=n_branches/10.0))
moves.append(mvBranchLengthScale(phylogeny, weight=n_branches))
tree_length := phylogeny.treeLength()


morpho_u <- morpho
morpho_u.excludeCharacter(v(3,21,27,32,33,40,72,82,84,86,87,88,90,92,95,100,101,102,105,115,119,120,134,137,139,142,146,156,179,183,189,190,211,214,219,222,230,234,240,244,265,270,276))
n_max_states <- 10
idx = 1
morpho_unordered[1] <- morpho_u
for (i in 2:n_max_states) {
    morpho_unordered[i] <- morpho                                # make local tmp copy of data
    morpho_unordered[i].setNumStatesPartition(i)                 # only keep character blocks with state space equal to size i
    nc = morpho_unordered[i].nchar()                             # get number of characters per character size with i-sized states

    if (nc > 0) {                                              # for non-empty character blocks
        q[idx] <- fnJC(i)                                      # make i-by-i rate matrix
        m_morph[idx] ~ dnPhyloCTMC( tree=phylogeny,
                                    Q=q[idx],
                                    nSites=nc,
                                    siteRates=rates_morpho,
                                    type="Standard")           # create model of evolution for the character block

        m_morph[idx].clamp(morpho_unordered[i])                  # attach the data

        idx = idx + 1                                          # increment counter
        idx
    }
}

#step_A
morpho_s <- morpho
morpho_s.excludeCharacter(v(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,  135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276))

r1=1
r2=2
r3=3

diag_rates := [[0.0,r1,r1,r2,r3],
               [r1,0.0,r1,r1,r2],
               [r1,r1,0.0,r1,r2],
               [r2,r1,r1,0.0,r1],
               [r3,r2,r2,r1,0.0]]

Q_s := fnFreeK(diag_rates)

s_morph ~ dnPhyloCTMC( tree=phylogeny,
                            Q=Q_s,
                            nSites=nc,
                            siteRates=rates_morpho,
                            type="Standard")
s_morph.clamp(morpho_s)

#step_B
morpho_s2 <- morpho
morpho_s2.excludeCharacter(v(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133, 135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276))

r1=1
r2=2
r3=3

diag_rates := [[0.0,r1,r2,r2,r3,r3],
               [r1,0.0,r1,r1,r2,r2],
               [r2,r1,0.0,r2,r2,r1],
               [r2,r1,r2,0.0,r1,r2],
               [r3,r2,r2,r1,0.0,r1],
               [r3,r2,r1,r2,r1,0.0]]

Q_s2 := fnFreeK(diag_rates)

s2_morph ~ dnPhyloCTMC( tree=phylogeny,
                            Q=Q_s2,
                            nSites=nc,
                            siteRates=rates_morpho,
                            type="Standard")
s2_morph.clamp(morpho_s2)

morpho_o <- morpho
morpho_o.excludeCharacter(v(1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,23,24,25,26,28,29,30,31,34,35,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,81,83,85,89,91,93,94,9,97,98,99,103,104,106,107,108,109,110,111,112,113,114,116,117,118,121,122,123,124,125,126,127,128,129,130,131,132,133,135,136,138,140,141,143,144,145,147,148,149,150,151,152,153,154,155,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,181,182,184,185,186,187,188,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,212,213,215,216,217,218,220,221,223,224,225,226,227,228,229,231,232,233,235,236,237,238,239,241,242,243,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,266,267,268,269,271,272,273,274,275,277))
lambda = 1
mu = 177
maxState = 6
Q_o <- fnOrderedRateMatrix(maxState, lambda, mu)
s_morph ~ dnPhyloCTMC( tree=phylogeny,
                            Q=Q_o,
                            nSites=nc,
                            siteRates=rates_morpho,
                            type="Standard")
s_morph.clamp(morpho_o)
